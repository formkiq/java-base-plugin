plugins {
  id 'java-library'
  id 'checkstyle'
  id 'distribution'
  id 'com.github.spotbugs'
  id 'com.diffplug.spotless'
  id 'com.github.ben-manes.versions'
  id 'com.formkiq.gradle.graalvm-native-plugin'
}

// Projects should use Maven Central for external dependencies
// This could be the organization's private repository
repositories {
  mavenCentral()
}

// Use the Checkstyle rules provided by the convention plugin
// Do not allow any warnings
// checkstyle {
//     config = resources.text.fromString(com.example.CheckstyleUtil.getCheckstyleConfig("/checkstyle.xml"))
//     maxWarnings = 0
// }

// Enable deprecation messages when compiling Java code
tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:deprecation"
}

allprojects {
  apply plugin: 'com.diffplug.spotless'
  apply plugin: 'java-library'
  apply plugin: 'checkstyle'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'com.github.ben-manes.versions'
  apply plugin: 'com.formkiq.gradle.graalvm-native-plugin'

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://central.sonatype.com/repository/maven-snapshots/"
    }
  }

  java {
    toolchain {
      languageVersion.set(JavaLanguageVersion.of(17))
    }
  }

  spotless {
    java {
      eclipse().sortMembersEnabled(true).configFile(rootProject.file("spotless.eclipseformat.xml"))
      removeUnusedImports()
      removeWildcardImports()
      licenseHeaderFile rootProject.file("LICENSE")
    }

    groovyGradle {
      target '*.gradle'
      greclipse()
      leadingTabsToSpaces(2)
      trimTrailingWhitespace()
      endWithNewline()
    }
  }

  spotbugs {
    excludeFilter = file("$rootDir/config/gradle/spotbugs-exclude.xml")
  }

  spotbugsMain {
    reports {
      html {
        required = true
      }
    }
  }

  spotbugsTest {
    reports {
      html {
        required = true
      }
    }
  }

  checkstyle {
    toolVersion = '10.12.4'
    configFile file("config/checkstyle/checkstyle.xml")
    configProperties = [project_loc: "${projectDir}"]
    maxWarnings = 0
    maxErrors = 0
  }

  test {
    failFast = true
    useJUnitPlatform()
  }
}
